/* The following code was generated by JFlex 1.6.0 */

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.lang.*;

int symbol_table_size = 100;
public string [] symbol_table = new string[symbol_table_size];
int entry_position = 0;
boolean exists = false;

public int install_id(String string)
{
	int ret_index;
	for(int i=0; i<symbol_table_size; i++)
	{
		if(symbol_table[i] == string)
		{
			ret_index = i;
			exists = true;
			return ret_index;
		}
	}

	if(!exists)
	{
		symbol_table[entry_position] = string;
		entry_position++;
	}

	return entry_position;
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/Ali Gholami/Documents/Amirkabir/COMPILER/Chronicle/PHASE 1 - LEXICAL ANALYZER/PH1_Lexical_Analyser.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\43\0\1\0\1\0\1\46\2\0\1\35\1\36\1\44\1\42\1\37"+
    "\1\43\1\47\1\45\1\0\11\0\1\27\1\26\1\40\1\30\1\41"+
    "\2\0\32\1\1\31\1\0\1\32\3\0\1\7\1\22\1\20\1\23"+
    "\1\5\1\6\1\14\1\21\1\16\2\1\1\10\1\15\1\17\1\13"+
    "\1\12\1\1\1\3\1\11\1\2\1\4\1\1\1\24\1\25\2\1"+
    "\1\33\1\0\1\34\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\21\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\12\1\1\23\1\1\1\24\5\1"+
    "\1\25\1\1\1\26\1\27\1\30\1\31\1\32\5\1"+
    "\1\33\1\1\1\34\1\35\3\1\1\36\1\37\6\1"+
    "\1\40\1\1\1\41\1\42\1\43\1\44\3\1\1\45"+
    "\1\46\1\47\1\50\1\1\1\51\6\1\1\52\1\53"+
    "\1\54\2\1\1\55\1\56\2\1\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u02d0\0\u02d0\0\u02d0\0\u02d0"+
    "\0\u02d0\0\u02d0\0\u02d0\0\u02d0\0\u0320\0\u0348\0\u02d0\0\u02d0"+
    "\0\u02d0\0\u0370\0\u02d0\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0438"+
    "\0\u0460\0\u0488\0\u04b0\0\u04d8\0\u0500\0\50\0\u0528\0\50"+
    "\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u02d0"+
    "\0\u02d0\0\u02d0\0\u02d0\0\u02d0\0\u0668\0\u0690\0\u06b8\0\u06e0"+
    "\0\u0708\0\50\0\u0730\0\50\0\50\0\u0758\0\u0780\0\u07a8"+
    "\0\50\0\50\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898"+
    "\0\50\0\u08c0\0\50\0\50\0\50\0\50\0\u08e8\0\u0910"+
    "\0\u0938\0\50\0\50\0\50\0\50\0\u0960\0\50\0\u0988"+
    "\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\50\0\50\0\50"+
    "\0\u0a78\0\u0aa0\0\50\0\50\0\u0ac8\0\u0af0\0\50";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\13\1\2\1\14\1\15\1\16"+
    "\1\17\1\2\1\20\1\21\1\22\1\2\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\2\0"+
    "\25\2\23\0\20\2\1\44\4\2\23\0\4\2\1\45"+
    "\20\2\23\0\11\2\1\46\13\2\23\0\7\2\1\47"+
    "\6\2\1\50\5\2\1\51\23\0\12\2\1\52\12\2"+
    "\23\0\16\2\1\53\6\2\23\0\23\2\1\54\1\2"+
    "\23\0\2\2\1\55\22\2\23\0\2\2\1\56\22\2"+
    "\23\0\6\2\1\57\16\2\23\0\5\2\1\60\10\2"+
    "\1\61\6\2\23\0\12\2\1\62\12\2\23\0\6\2"+
    "\1\63\11\2\1\64\4\2\23\0\12\2\1\65\12\2"+
    "\23\0\12\2\1\66\12\2\23\0\20\2\1\67\4\2"+
    "\122\0\1\70\47\0\1\71\10\0\1\72\36\0\1\73"+
    "\66\0\1\74\1\0\4\2\1\75\20\2\23\0\1\2"+
    "\1\76\4\2\1\77\16\2\23\0\1\2\1\100\23\2"+
    "\23\0\10\2\1\101\14\2\23\0\22\2\1\102\2\2"+
    "\23\0\15\2\1\103\7\2\23\0\2\2\1\104\22\2"+
    "\23\0\22\2\1\105\2\2\23\0\15\2\1\106\7\2"+
    "\23\0\12\2\1\107\12\2\23\0\15\2\1\110\7\2"+
    "\23\0\1\2\1\111\23\2\23\0\1\2\1\112\23\2"+
    "\23\0\10\2\1\113\14\2\23\0\6\2\1\114\16\2"+
    "\23\0\12\2\1\115\12\2\23\0\23\2\1\116\1\2"+
    "\23\0\4\2\1\117\10\2\1\120\7\2\23\0\16\2"+
    "\1\121\6\2\23\0\3\2\1\122\21\2\23\0\7\2"+
    "\1\123\15\2\23\0\12\2\1\124\12\2\23\0\4\2"+
    "\1\125\20\2\23\0\1\2\1\126\23\2\23\0\1\2"+
    "\1\127\23\2\23\0\13\2\1\130\3\2\1\131\5\2"+
    "\23\0\16\2\1\132\6\2\23\0\4\2\1\133\20\2"+
    "\23\0\2\2\1\134\22\2\23\0\7\2\1\135\15\2"+
    "\23\0\16\2\1\136\6\2\23\0\16\2\1\137\6\2"+
    "\23\0\7\2\1\140\15\2\23\0\2\2\1\141\22\2"+
    "\23\0\17\2\1\142\5\2\23\0\2\2\1\143\22\2"+
    "\23\0\4\2\1\144\20\2\23\0\1\2\1\145\23\2"+
    "\23\0\4\2\1\146\20\2\23\0\16\2\1\147\6\2"+
    "\23\0\20\2\1\150\4\2\23\0\6\2\1\151\16\2"+
    "\23\0\22\2\1\152\2\2\23\0\12\2\1\153\12\2"+
    "\23\0\14\2\1\154\10\2\23\0\3\2\1\155\21\2"+
    "\23\0\2\2\1\156\22\2\23\0\4\2\1\157\20\2"+
    "\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\21\1\1\11\1\1\10\11\2\1\3\11\1\1"+
    "\1\11\24\1\5\11\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 140) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println(yytext() + "\t" + "ID\t" + "Symbol Table Entry" + install_id(yytext()));
          }
        case 48: break;
        case 2: 
          { System.out.println(yytext() + "\t" + "SEMICOLON_KW\t" + '-');
          }
        case 49: break;
        case 3: 
          { System.out.println(yytext() + "\t" + "COLON_KW\t" + '-');
          }
        case 50: break;
        case 4: 
          { System.out.println(yytext() + "\t" + "EQ_KW\t" + '-');
          }
        case 51: break;
        case 5: 
          { System.out.println(yytext() + "\t" + "OPENBRACKET_KW\t" + '-');
          }
        case 52: break;
        case 6: 
          { System.out.println(yytext() + "\t" + "CLOSEBRACKET_KW\t" + '-');
          }
        case 53: break;
        case 7: 
          { System.out.println(yytext() + "\t" + "OPENACCOLADE_KW\t" + '-');
          }
        case 54: break;
        case 8: 
          { System.out.println(yytext() + "\t" + "CLOSEACCOLADE_KW\t" + '-');
          }
        case 55: break;
        case 9: 
          { System.out.println(yytext() + "\t" + "OPENPARENTHESIS_KW\t" + '-');
          }
        case 56: break;
        case 10: 
          { System.out.println(yytext() + "\t" + "CLOSEPARENTHESIS_KW\t" + '-');
          }
        case 57: break;
        case 11: 
          { System.out.println(yytext() + "\t" + "COMMA_KW\t" + '-');
          }
        case 58: break;
        case 12: 
          { System.out.println(yytext() + "\t" + "LT_KW\t" + '-');
          }
        case 59: break;
        case 13: 
          { System.out.println(yytext() + "\t" + "GT_KW\t" + '-');
          }
        case 60: break;
        case 14: 
          { System.out.println(yytext() + "\t" + "ADD_KW\t" + '-');
          }
        case 61: break;
        case 15: 
          { System.out.println(yytext() + "\t" + "DIF_KW\t" + '-');
          }
        case 62: break;
        case 16: 
          { System.out.println(yytext() + "\t" + "MUL_KW\t" + '-');
          }
        case 63: break;
        case 17: 
          { System.out.println(yytext() + "\t" + "DIV_KW\t" + '-');
          }
        case 64: break;
        case 18: 
          { System.out.println(yytext() + "\t" + "MOD_KW\t" + '-');
          }
        case 65: break;
        case 19: 
          { System.out.println(yytext() + "\t" + "OR_KW\t" + '-');
          }
        case 66: break;
        case 20: 
          { System.out.println(yytext() + "\t" + "IF_KW\t" + '-');
          }
        case 67: break;
        case 21: 
          { System.out.println(yytext() + "\t" + "DO_KW\t" + '-');
          }
        case 68: break;
        case 22: 
          { System.out.println(yytext() + "\t" + "ASSIGN_KW\t" + '-');
          }
        case 69: break;
        case 23: 
          { System.out.println(yytext() + "\t" + "LTE_KW\t" + '-');
          }
        case 70: break;
        case 24: 
          { System.out.println(yytext() + "\t" + "NEQ_KW\t" + '-');
          }
        case 71: break;
        case 25: 
          { System.out.println(yytext() + "\t" + "GTE_KW\t" + '-');
          }
        case 72: break;
        case 26: 
          { System.out.println(yytext() + "\t" + "DOT_KW\t" + '-');
          }
        case 73: break;
        case 27: 
          { System.out.println(yytext() + "\t" + "END_KW\t" + '-');
          }
        case 74: break;
        case 28: 
          { System.out.println(yytext() + "\t" + "FOR_KW\t" + '-');
          }
        case 75: break;
        case 29: 
          { System.out.println(yytext() + "\t" + "AND_KW\t" + '-');
          }
        case 76: break;
        case 30: 
          { System.out.println(yytext() + "\t" + "INTEGER_KW\t" + '-');
          }
        case 77: break;
        case 31: 
          { System.out.println(yytext() + "\t" + "NOT_KW\t" + '-');
          }
        case 78: break;
        case 32: 
          { System.out.println(yytext() + "\t" + "THEN_KW\t" + '-');
          }
        case 79: break;
        case 33: 
          { System.out.println(yytext() + "\t" + "REAL_KW\t" + '-');
          }
        case 80: break;
        case 34: 
          { System.out.println(yytext() + "\t" + "UPTO_KW\t" + '-');
          }
        case 81: break;
        case 35: 
          { System.out.println(yytext() + "\t" + "ELSE_KW\t" + '-');
          }
        case 82: break;
        case 36: 
          { System.out.println(yytext() + "\t" + "EXIT_KW\t" + '-');
          }
        case 83: break;
        case 37: 
          { System.out.println(yytext() + "\t" + "MAIN_KW\t" + '-');
          }
        case 84: break;
        case 38: 
          { System.out.println(yytext() + "\t" + "CASE_KW\t" + '-');
          }
        case 85: break;
        case 39: 
          { System.out.println(yytext() + "\t" + "CHARACTER_KW\t" + '-');
          }
        case 86: break;
        case 40: 
          { System.out.println(yytext() + "\t" + "BOOLEAN_KW\t" + '-');
          }
        case 87: break;
        case 41: 
          { System.out.println(yytext() + "\t" + "WHEN_KW\t" + '-');
          }
        case 88: break;
        case 42: 
          { System.out.println(yytext() + "\t" + "WHILE_KW\t" + '-');
          }
        case 89: break;
        case 43: 
          { System.out.println(yytext() + "\t" + "RETURN_KW\t" + '-');
          }
        case 90: break;
        case 44: 
          { System.out.println(yytext() + "\t" + "SWITCH_KW\t" + '-');
          }
        case 91: break;
        case 45: 
          { System.out.println(yytext() + "\t" + "DOWNTO_KW\t" + '-');
          }
        case 92: break;
        case 46: 
          { System.out.println(yytext() + "\t" + "PROGRAM_KW\t" + '-');
          }
        case 93: break;
        case 47: 
          { System.out.println(yytext() + "\t" + "PROCEDURE_KW\t" + '-');
          }
        case 94: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
